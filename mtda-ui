#!/usr/bin/env python3
# ---------------------------------------------------------------------------
# Command Line Interface for MTDA
# ---------------------------------------------------------------------------
#
# This software is a part of MTDA.
# Copyright (c) Mentor, a Siemens business, 2017-2020
#
# ---------------------------------------------------------------------------
# SPDX-License-Identifier: MIT
# ---------------------------------------------------------------------------

import os
import sys
import time

from py3qterm import TerminalWidget
from py3qterm.backend import Session
from py3qterm.backend import Terminal

from PyQt5.QtWidgets import qApp, QMainWindow, QAction, QApplication, QStyle
from PyQt5.QtGui import QIcon

from mtda.client import Client
from mtda.console.screen import ScreenOutput


class DeviceConsole(TerminalWidget):

    def __init__(self, parent):
        super().__init__(parent)

    def agent(self):
        if Session._mux is not None:
            return Session._mux.agent(self._session._session_id)
        return None

    def execute(self, command="/bin/bash"):
        self._session = DeviceSession()
        self._session.start(command)
        self._timer_id = None
        self.focusInEvent(None)

    def screen(self):
        if Session._mux is not None:
            return Session._mux.screen(self._session._session_id)
        return None


class DeviceMux:

    def __init__(self):
        self.session = {}

    def agent(self, sid):
        if sid in self.session:
            return self.session[sid]['agent']
        return None

    def proc_keepalive(self, sid, w, h, cmd=None):
        if sid not in self.session:
            # Start a new session
            self.remote = os.getenv("MTDA_REMOTE", "localhost")
            agent = Client(self.remote)
            term = Terminal(w, h)
            self.session[sid] = {
                'agent': agent,
                'state': 'unborn',
                'term': term,
                'time': time.time(),
                'w': w,
                'h': h}
            screen = DeviceScreen(agent, term, self.session[sid])
            agent.console_remote(self.remote, screen)
            agent.start()
            self.session[sid]['state'] = 'alive'
            self.session[sid]['screen'] = screen
        os.environ["COLUMNS"] = str(w)
        os.environ["ROWS"] = str(h)
        return True

    def proc_dump(self, sid):
        if sid not in self.session:
            return False
        return self.session[sid]['term'].dump()

    def proc_write(self, sid, d):
        if sid not in self.session:
            return False
        elif self.session[sid]['state'] != 'alive':
            return False
        term = self.session[sid]['term']
        d = term.pipe(d)
        agent = self.session[sid]['agent']
        agent.console_send(d)
        return True

    def screen(self, sid):
        if sid in self.session:
            return self.session[sid]['screen']
        return None

    def stop(self):
        return None


class DeviceScreen(ScreenOutput):

    def __init__(self, mtda, term, session):
        super().__init__(mtda)
        self._term = term
        self._session = session

    def write(self, data):
        self._term.write(data)
        data = self._term.read()
        self._session["changed"] = time.time()


class DeviceSession(Session):

    def __init__(self):
        super().__init__()
        Session._mux = DeviceMux()


class MultiTenantDeviceAccessWindow(QMainWindow):

    def __init__(self):
        super().__init__()

        self.initUI()

    def capture(self):
        screen = self.console.screen()
        if screen is not None:
            if screen.capture_enabled() is True:
                screen.capture_stop()
                icn = self.style().standardIcon(QStyle.SP_DialogSaveButton)
                self.captureAct.setIcon(icn)
            else:
                screen.capture_start()
                icn = self.style().standardIcon(QStyle.SP_BrowserStop)
                self.captureAct.setIcon(icn)

    def initUI(self):

        self.console = DeviceConsole(self)
        self.setCentralWidget(self.console)

        exitIcn = self.style().standardIcon(QStyle.SP_FileDialogEnd)
        exitAct = QAction(exitIcn, 'Exit', self)
        exitAct.setShortcut('Ctrl+Q')
        exitAct.setStatusTip('Exit MTDA')
        exitAct.triggered.connect(self.close)

        powerIcn = self.style().standardIcon(QStyle.SP_ComputerIcon)
        powerAct = QAction(powerIcn, 'Power on/off', self)
        powerAct.setShortcut('Ctrl+P')
        powerAct.setStatusTip('Power device on/off')
        powerAct.triggered.connect(self.power)

        captureIcn = self.style().standardIcon(QStyle.SP_DialogSaveButton)
        captureAct = QAction(captureIcn, 'Capture screen start/stop', self)
        captureAct.setStatusTip('Capture screen output start/stop')
        captureAct.triggered.connect(self.capture)
        self.captureAct = captureAct

        self.statusBar()

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(exitAct)

        toolbar = self.addToolBar('Exit')
        toolbar.addAction(powerAct)
        toolbar.addAction(captureAct)

        self.resize(880, 760)
        self.setWindowTitle('MTDA')
        self.show()

    def power(self):
        agent = self.console.agent()
        if agent is not None:
            agent.target_toggle()


def main():
    app = QApplication(sys.argv)
    ex = MultiTenantDeviceAccessWindow()
    os._exit(app.exec_())


if __name__ == '__main__':
    main()
